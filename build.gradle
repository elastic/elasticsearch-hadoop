import org.elasticsearch.hadoop.gradle.buildtools.ConcatFilesTask
import java.lang.management.ManagementFactory;
import java.time.LocalDateTime;
import org.elasticsearch.gradle.VersionProperties

description = 'Elasticsearch for Apache Hadoop'

apply plugin: 'es.hadoop.build.root'
apply plugin: 'com.gradleup.nmcp.aggregation'

defaultTasks 'build'

repositories {
    mavenCentral()
}
dependencies {
    nmcpAggregation(project(":dist"))
    nmcpAggregation(project(":elasticsearch-hadoop-mr"))
    nmcpAggregation(project(":elasticsearch-hadoop-pig"))
    nmcpAggregation(project(":elasticsearch-hadoop-hive"))
    nmcpAggregation(project(":elasticsearch-spark-20"))
    nmcpAggregation(project(":elasticsearch-spark-13"))
    nmcpAggregation(project(":elasticsearch-spark-30"))
    nmcpAggregation(project(":elasticsearch-storm"))
}

tasks.named('zipAggregation').configure {
    archiveFileName.unset();
    archiveBaseName.set("elasticsearch-hadoop-maven-aggregation")
    destinationDirectory.set(layout.buildDirectory.dir("distributions"));
    archiveVersion.set(VersionProperties.elasticsearch)
}

allprojects {
    group = "org.elasticsearch"
    tasks.withType(AbstractCopyTask) {
      duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

// Simple utility task to help with downloading artifacts and jars
if (project.hasProperty("find-artifact")) {
    String artifact = project.getProperty("find-artifact")

    configurations {
        findJar
    }

    dependencies {
        findJar artifact
    }

    task find(type: Copy) {
        dependsOn configurations.findJar
        from configurations.findJar.first()
        into new File(rootProject.buildDir, 'found/')
        doLast {
            if (configurations.findJar.files.size() > 0) {
                String artifactName = configurations.findJar.first().name
                File found = new File(rootProject.buildDir, 'found/')
                logger.lifecycle("Found [$artifactName] and stored it in [$found]")
                if (configurations.findJar.size() > 1) {
                    configurations.findJar.each { logger.lifecycle("Also found other dependencies: [${ it.name }]") }
                }
            } else {
                logger.lifecycle("Could not find artifact [$artifact]")
            }
        }
    }
}
