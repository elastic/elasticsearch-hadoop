import org.elasticsearch.hadoop.gradle.scala.SparkScalaVariant

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'
apply plugin: 'scala'

repositories {
    mavenCentral()
}

group = 'org.elasticsearch.spark'
version = '1.0'

def spark24 = "2.4.4"
def spark20 = "2.2.3"
def spark13 = "1.6.2"

def scala212s = '2.12'
def scala211s = '2.11'
def scala210s = '2.10'

def scala212 = '2.12.6'
def scala211 = '2.11.12'
def scala210 = '2.10.7'

List<SparkScalaVariant> variants = [
        SparkScalaVariant.main("spark24scala212", spark24, scala211),
        SparkScalaVariant.variant("spark24scala211", spark24, scala211),
        SparkScalaVariant.variant("spark20scala210", spark20, scala210)
]

class ScalaRuntimeCapability implements ComponentMetadataRule {
    final static String SCALA_LIBRARY = 'scala-library'

    @Override
    void execute(ComponentMetadataContext componentMetadataContext) {
        componentMetadataContext.details.with { // Mutate each module dependency
            if (SCALA_LIBRARY.equals(id.name)) { // check if it's a scala library
                allVariants { // for all variants on that dependency
                    it.withCapabilities { // mutate each variant
                        it.addCapability('org.elasticsearch.gradle', 'scala-runtime', id.version) // add the scala runtime capability
                    }
                }
            }
        }
    }
}

dependencies {
    // activate the rule
    components.all(ScalaRuntimeCapability)
}

task testAll {
    group 'verification'
}

project.tasks.create('variants') {
    group 'build'
}

variants.forEach { v ->
    if (v.isVariant()) {
        sourceSets {
            create(v.variantSourceSetName) {
                java {
                    srcDir 'src/main/java'
                }
                scala {
                    srcDir 'src/main/scala'
                    srcDir "src/main/${v.variant}"
                }
            }
            create(v.testSourceSetName) {
                java {
                    srcDir 'src/test/java'
                }
                scala {
                    srcDir 'src/test/scala'
                    srcDir "src/test/${v.variant}"
                }
                // This source set's associated main class is:
                SourceSet main = (project.sourceSets as SourceSetContainer).findByName(v.variantSourceSetName)
                // The variant test source needs the main source set class output, and its compile classpath for compilation
                Configuration testCompileClasspath = project.getConfigurations().getByName(v.testConfiguration("compileClasspath"))
                setCompileClasspath(project.files(main.getOutput(), testCompileClasspath))
                // The variant test source needs its own class output, the main source set class output, and its runtime
                // classpath for runtime
                Configuration testRuntimeClasspath = project.getConfigurations().getByName(v.testConfiguration("runtimeClasspath"))
                setRuntimeClasspath(project.files(getOutput(), main.getOutput(), testRuntimeClasspath))
            }
        }

        java {
            registerFeature(v.variant) {
                usingSourceSet(sourceSets.findByName(v.variantSourceSetName))
                capability('org.elasticsearch.gradle', 'elasticsearch', '1.0')
                capability('org.elasticsearch.gradle', 'spark-framework', v.sparkVersion)
                capability('org.elasticsearch.gradle', 'scala-runtime', v.scalaMajorVersion)
            }
            registerFeature(v.testBase) {
                usingSourceSet(sourceSets.findByName(v.testSourceSetName))
                capability('org.elasticsearch.gradle', 'elasticsearch', '1.0')
                capability('org.elasticsearch.gradle', 'spark-framework', v.sparkVersion)
                capability('org.elasticsearch.gradle', 'scala-runtime', v.scalaMajorVersion)
            }
        }

        configurations { ConfigurationContainer container ->
            ["compile", "implementation", "runtime", "runtimeOnly"].forEach { conf ->
                container.getByName(v.testConfiguration(conf)) {
                    extendsFrom configurations.findByName(v.configuration(conf))
                }
            }
        }

        project.tasks.create(v.testTaskName, Test) { Test t ->
            t.testClassesDirs = project.sourceSets.getByName(v.testSourceSetName).output.classesDirs
            t.classpath = project.sourceSets.getByName(v.testSourceSetName).runtimeClasspath
            t.group = 'verification'

            // Project Specific
            t.excludes = ["**/Abstract*.class"]
            t.ignoreFailures = false
//    t.executable = "${project.ext.get('runtimeJavaHome')}/bin/java"
            t.minHeapSize = "256m"
            t.maxHeapSize = "2g"
        }
    }

    configurations { ConfigurationContainer container ->
        container.create(v.artifactConfiguration) {
            canBeConsumed = true
            canBeResolved = false
        }
    }

    artifacts { ArtifactHandler a ->
        a.add(v.artifactConfiguration, project.tasks.getByName(v.jarTask))
    }

    dependencies { DependencyHandler d ->
        d.add(v.configuration("implementation"), "org.scala-lang:scala-library:${v.scalaVersion}")
        d.add(v.configuration("implementation"), "org.scala-lang:scala-reflect:${v.scalaVersion}")
        d.add(v.configuration("implementation"), project(path: ':gtest:core', configuration: v.artifactConfiguration))
        d.add(v.testConfiguration("implementation"), "junit:junit:4.12")
    }

    testAll {
        dependsOn v.testTaskName
    }

    // SQL specific
    project.tasks.getByName(v.jarTask) {
        from(zipTree(project(':gtest:core').configurations.getByName(v.artifactConfiguration).artifacts.file.get(0))) {
            include "org/elasticsearch/spark/**"
            include "META-INF/services/*"
        }
        archiveBaseName = "sql20_${v.scalaMajorVersion}"
        archiveClassifier = null
    }

    project.tasks.variants {
        dependsOn v.jarTask
    }
}
