import org.elasticsearch.gradle.info.BuildParams

apply plugin: 'es.hadoop.build.integration'

description = "Elasticsearch Hadoop Map/Reduce"

dependencies {
    api(project.ext.hadoopClient)
    api("org.apache.hadoop:hadoop-common:${project.ext.hadoopVersion}")
    api("org.apache.hadoop:hadoop-mapreduce-client-core:${project.ext.hadoopVersion}")
    
    implementation("commons-logging:commons-logging:1.1.1")
    implementation("commons-httpclient:commons-httpclient:3.0.1")
    implementation("commons-codec:commons-codec:1.4")
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("org.codehaus.jackson:jackson-mapper-asl:${project.ext.jacksonVersion}")
    implementation("org.codehaus.jackson:jackson-core-asl:${project.ext.jacksonVersion}")
    
    testImplementation(project(":test:shared"))
    testImplementation("io.netty:netty-all:4.0.29.Final")
    testImplementation("org.elasticsearch:securemock:1.2")
    
    itestImplementation(project(":test:shared"))
    itestImplementation("org.apache.hadoop:hadoop-minikdc:${project.ext.minikdcVersion}") {
        // For some reason, the dependencies that are pulled in with MiniKDC have multiple resource files
        // that cause issues when they are loaded. We exclude the ldap schema data jar to get around this.
        exclude group: "org.apache.directory.api", module: "api-ldap-schema-data"
    }
}

String generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: "generateGitHash")
    }
}

task generateGitHash {
    inputs.property "revision", BuildParams.gitRevision
    outputs.dir generatedResources

    doLast {
        Properties props = new Properties()
        props.put("version", version)
        props.put("hash", BuildParams.gitRevision)
        File output = new File(generatedResources, "esh-build.properties")
        new File(generatedResources).mkdirs()
        output.createNewFile()
        props.store(output.newWriter(), null)
    }
}

eclipse.classpath.file {
    whenMerged { cp ->
        // export all jars (to be used upstream by dependent projects)  <-- for some reason Gradle removes all jars
        cp.entries.each { entry ->
            if (entry.hasProperty("exported"))
                entry.exported = true
        }
    }
}
