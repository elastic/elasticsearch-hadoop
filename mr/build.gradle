import org.elasticsearch.gradle.info.BuildParams

apply plugin: 'es.hadoop.build.integration'

description = "Elasticsearch Hadoop Map/Reduce"

configurations {
    embedded {
        transitive = false
        canBeResolved = true
    }
    implementation {
        extendsFrom project.configurations.embedded
    }
    // Gradle's java library plugin adds a variant to each project that offers the classes dir as an artifact that can be
    // used in other projects instead of requiring a jar operation to happen. We have artifacts that are being shaded into
    // a third-party jar that this depends on, which inherently means there is no classes output to share for compilation.
    // This will force the MR project to require jars from upstream project dependencies, which shouldn't be a problem since
    // there should only be one upstream project.
    compileClasspath {
        beforeLocking {
            attributes {
                attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements, LibraryElements.JAR))
            }
        }
    }
    testCompileClasspath {
        beforeLocking {
            attributes {
                attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements, LibraryElements.JAR))
            }
        }
    }
    itestCompileClasspath {
        beforeLocking {
            attributes {
                attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements, LibraryElements.JAR))
            }
        }
    }
}

dependencies {
    api(project.ext.hadoopClient)
    api("org.apache.hadoop:hadoop-common:${project.ext.hadoopVersion}")
    api("org.apache.hadoop:hadoop-mapreduce-client-core:${project.ext.hadoopVersion}")
    
    embedded(project(path: ":thirdparty", configuration: "shadow"))//"commons-httpclient:commons-httpclient:3.0.1")
    implementation("commons-logging:commons-logging:1.1.1")
    implementation("commons-codec:commons-codec:1.4")
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("org.codehaus.jackson:jackson-mapper-asl:${project.ext.jacksonVersion}")
    implementation("org.codehaus.jackson:jackson-core-asl:${project.ext.jacksonVersion}")
    
    testImplementation(project(":test:shared"))
    testImplementation("io.netty:netty-all:4.0.29.Final")
    testImplementation("org.elasticsearch:securemock:1.2")
    
    itestImplementation(project(":test:shared"))
    itestImplementation("org.apache.hadoop:hadoop-minikdc:${project.ext.minikdcVersion}") {
        // For some reason, the dependencies that are pulled in with MiniKDC have multiple resource files
        // that cause issues when they are loaded. We exclude the ldap schema data jar to get around this.
        exclude group: "org.apache.directory.api", module: "api-ldap-schema-data"
    }
}

String generatedResources = "$buildDir/generated-resources/main"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: "generateGitHash")
    }
}

task generateGitHash {
    inputs.property "revision", BuildParams.gitRevision
    outputs.dir generatedResources

    doLast {
        Properties props = new Properties()
        props.put("version", version)
        props.put("hash", BuildParams.gitRevision)
        File output = new File(generatedResources, "esh-build.properties")
        new File(generatedResources).mkdirs()
        output.createNewFile()
        props.store(output.newWriter(), null)
    }
}

jar {
    dependsOn(project.configurations.embedded)
    from(project.configurations.embedded.collect { it.isDirectory() ? it : zipTree(it)}) {
        include "org/elasticsearch/hadoop/**"
        include "org/apache/**"
        include "esh-build.properties"
        include "META-INF/services/*"
    }
}

eclipse.classpath.file {
    whenMerged { cp ->
        // export all jars (to be used upstream by dependent projects)  <-- for some reason Gradle removes all jars
        cp.entries.each { entry ->
            if (entry.hasProperty("exported"))
                entry.exported = true
        }
    }
}
