import java.nio.file.Files

apply plugin: 'groovy'

/*
 * Configure Project Versions
 */

boolean localRepo = project.getProperties().containsKey("localRepo")

Properties props = new Properties()
props.load(project.file('esh-version.properties').newDataInputStream())
version = props.getProperty('eshadoop')
String esVersion = props.getProperty('elasticsearch')

// determine if we're building a snapshot or not (by default we will be)
boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"))
if (snapshot) {
    // we update the version property to reflect if we are building a snapshot or a release build
    version += "-SNAPSHOT"
    props.put("eshadoop", version)
}

repositories {
    jcenter()
    mavenCentral()

    // For resolving propdeps (provided/optional dependencies)
    maven { url 'https://repo.spring.io/plugins-release' }

    // For Elasticsearch snapshots.
    if (localRepo) {
        // For some reason the root dirs all point to the buildSrc folder. The local Repo will be one above that.
        flatDir { dirs new File(project.rootDir, "../localRepo") }
    } else {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    // Provided/Optional Dependencies
    compile 'org.springframework.build.gradle:propdeps-plugin:0.0.7'

    if (localRepo) {
        compile name: "build-tools-${version}"
    } else {
        compile group: 'org.elasticsearch.gradle', name: 'build-tools', version: esVersion
    }
}

// write the updated properties to a temp property file
File tempPropertiesFile = new File(project.buildDir, "esh-version.properties")
task writeVersionProperties {
    inputs.properties(props)
    outputs.file(tempPropertiesFile)
    doLast {
        OutputStream stream = Files.newOutputStream(tempPropertiesFile.toPath())
        try {
            props.store(stream, "UTF-8")
        } finally {
            stream.close()
        }
    }
}

// copy the saved property file to the resources dir
processResources {
    dependsOn writeVersionProperties
    from tempPropertiesFile
}